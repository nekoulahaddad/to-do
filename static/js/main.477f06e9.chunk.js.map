{"version":3,"sources":["toDo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","CompleteTask","deleteTask","style","textDecoration","isCompleted","className","name","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","console","log","type","onChange","target","ToDo","todos","setTodos","newTodos","filter","splice","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAGA,SAASA,EAAT,GAAqD,IAAtCC,EAAqC,EAArCA,KAAKC,EAAgC,EAAhCA,MAAMC,EAA0B,EAA1BA,aAAaC,EAAa,EAAbA,WACtC,OACA,6BACA,yBAAKC,MAAO,CAACC,eAAeL,EAAKM,YAAc,eAAiB,IAAKC,UAAU,QAAQP,EAAKQ,MAC5F,4BAASC,QAAS,kBAAMP,EAAaD,KAArC,QACA,4BAASQ,QAAS,kBAAMN,EAAWF,KAAnC,MAMD,SAASS,EAAT,GAA8B,IAAXC,EAAU,EAAVA,QAAU,EACHC,mBAAS,IADN,mBACrBC,EADqB,KACfC,EADe,KAW5B,OACC,yBAAKP,UAAU,QAChB,0BAAMQ,SAVe,SAAAC,GACpBA,EAAEC,iBACEJ,IACJK,QAAQC,IAAIN,GACZF,EAAQE,GACRC,EAAS,OAMV,2BAAOM,KAAK,OAAOb,UAAU,QAAQM,MAAOA,EAAOQ,SAAW,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,YAsDvEU,MAhDf,WAAgB,IAAD,EACWX,mBAAS,CAClC,CACCJ,KAAK,WACLF,aAAY,GAEb,CACCE,KAAK,YACLF,aAAY,GAEb,CACCE,KAAK,eACLF,aAAY,KAZC,mBACPkB,EADO,KACDC,EADC,KAqBRvB,EAAe,SAAAD,GACpB,IAAMyB,EAAQ,YAAOF,GACrBE,EAASzB,GAAOK,aAAc,EAC9BmB,EAASC,IAGJvB,EAAa,SAAAF,GACnB,IAAMyB,EAAQ,YAAOF,GACNE,EAASC,QAAO,SAAA3B,GAAI,OAAIA,GAAQ0B,EAASzB,MACxDyB,EAASE,OAAO3B,EAAM,GACtBwB,EAASC,IAKR,OACE,yBAAKnB,UAAU,SACdiB,EAAMK,KAAI,SAAC7B,EAAKC,GAAN,OACV,kBAACF,EAAD,CAAM+B,IAAK7B,EAAOA,MAAOA,EAAOD,KAAMA,EAAME,aAAcA,EAAcC,WAAYA,OAErF,kBAACO,EAAD,CAAWC,QAzBE,SAACH,GAChB,IAAMkB,EAAQ,sBAAOF,GAAP,CAAa,CAAChB,UAC5BiB,EAASC,QCtCIK,MAVf,WACE,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,SCIcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.477f06e9.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\n\r\nfunction Todo({todo,index,CompleteTask,deleteTask}) {   //make sure you put brackets cuz we are restructioring it from the props\r\n\treturn (\r\n\t<div >\r\n\t<div style={{textDecoration:todo.isCompleted ? 'line-through' : ''}} className=\"todo\">{todo.name}</div>\r\n\t<button  onClick={() => CompleteTask(index)}>done</button>\r\n\t<button  onClick={() => deleteTask(index)}>x</button>\r\n\t</div>\r\n\r\n)}\r\n\r\n\r\nfunction TodoForm({addTodo}) {\r\n\tconst [value,setValue] = useState('');\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tif(!value) return;\r\n\t\tconsole.log(value)\r\n\t\taddTodo(value);\r\n\t\tsetValue('');\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"form\">\r\n\t<form onSubmit={handleSubmit}>\r\n\t<input type=\"text\" className=\"input\" value={value} onChange={ e => setValue(e.target.value)} />\r\n\t</form>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nfunction ToDo(){\r\n\tconst [todos,setTodos] = useState([\r\n\t{\r\n\t\tname:\"make bed\",\r\n\t\tisCompleted:false\r\n\t},\r\n\t{\r\n\t\tname:\"make food\",\r\n\t\tisCompleted:true\r\n\t},\r\n\t{\r\n\t\tname:\"make web app\",\r\n\t\tisCompleted:false\r\n\t}\r\n\t]);\r\n\r\n\tconst addTodo = (name) => {\r\n\t\tconst newTodos = [...todos,{name}];\r\n\t\tsetTodos(newTodos)\r\n\t}\r\n\r\n\tconst CompleteTask = index =>  {\r\n\t\tconst newTodos = [...todos];\r\n\t\tnewTodos[index].isCompleted = true;\r\n\t\tsetTodos(newTodos)\r\n\t}\r\n\r\n\tconst deleteTask = index =>  {\r\n\tconst newTodos = [...todos];\r\n\tconst result = newTodos.filter(todo => todo != newTodos[index]);\r\n\tnewTodos.splice(index,1);\r\n\tsetTodos(newTodos)\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"to-do\">\r\n    {todos.map((todo,index) => (\r\n    \t<Todo key={index} index={index} todo={todo} CompleteTask={CompleteTask} deleteTask={deleteTask} />\r\n    \t))}\r\n    <TodoForm  addTodo={addTodo}/>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default ToDo;\r\n","import React from 'react';\nimport './App.css';\nimport ToDo from './toDo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <ToDo />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}